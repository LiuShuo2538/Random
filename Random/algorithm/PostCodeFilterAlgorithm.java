package com.wiseweb.algorithm;

import java.math.BigDecimal;

/**
 * 邮编过滤算法
 * 最后两位清洗之后是00（查不到全国邮编，只能查到前4位）
 * Created by ${LiuShuo} on 2016/7/15.
 */
public class PostCodeFilterAlgorithm {

    public static Object getModelPostCode(Object value , Object key){
        //\u5224\u65AD\u53C2\u6570\u662F\u5426\u4E3Anull\u3001"null"\u3001"" ,\u4E3Atrue\u65F6\u4E0D\u505A\u5904\u7406
        if (value==null||value.equals("null")||value.equals("")) return "";
        String str = value+"";
        str=str.replaceAll("\\s*", "");
        str = str.replaceAll("\\u3000", "");
        int isSuangYin = 0;
        if (str.endsWith("\"")&&str.startsWith("\"")){
            str = str.substring(1, str.length() - 1);
            isSuangYin = 1;
        }
        if (str.length() !=6)return value;
        //\u53BB\u6389\u524D\u540E\u7A7A\u683C\u957F\u5EA6\u5C0F\u4E8E\u7B49\u4E8E1\u7684\u76F4\u63A5\u8FD4\u56DE
        if (str.trim().length()<2) return value;
        String salt = key + "";
        String saltok = salt.replaceAll("\\s*", "");
        //\u76D0\u503Chash
        int hashSalt = 0;

        if (salt.length()<1){
            //\u6CA1\u6709\u76D0\u503C
        }else {
            hashSalt=Math.abs(saltok.hashCode());
        }

        String[] zip = {"100000", "101100", "101200", "101300", "101400", "101500", "102100", "102200", "102400", "102600", "200000", "200100", "201100", "200120", "201300", "201400", "201500", "201600", "201700", "201800", "201900", "202150", "300000", "300450", "300480", "301500", "301600", "301700", "301800", "301900", "400000", "400700", "400900", "401120", "401320", "404000", "408000", "010000", "012000", "012600", "014000", "015000", "016000", "017000", "021000", "021400", "022150", "024000", "026000", "028000", "029200", "137400", "162650", "030000", "030200", "030600", "034000", "037000", "038500", "041000", "043000", "044000", "045000", "046000", "048000", "050000", "055750", "052360", "053000", "054000", "054100", "056000", "056300", "061000", "062150", "062550", "063000", "065000", "066000", "066100", "067000", "071000", "072750", "073000", "074000", "075000", "110000", "111000", "112000", "112300", "112700", "113000", "114000", "114200", "115000", "116000", "116300", "117000", "118000", "121000", "121200", "121300", "125000", "125100", "122000", "122100", "123000", "124000", "130000", "130500", "131200", "131300", "132000", "132400", "133000", "133100", "133300", "133400", "133700", "134000", "134200", "134300", "134600", "135000", "136000", "136100", "136200", "137000", "137100", "138000", "150000", "150100", "150300", "150600", "151100", "151400", "152000", "152500", "153000", "154000", "154100", "154600", "155100", "156100", "156400", "157000", "157300", "158100", "158300", "161000", "163000", "164000", "164300", "164100", "210000", "211400", "212000", "212300", "213000", "214000", "214200", "214400", "215000", "215300", "215500", "215600", "221000", "222000", "223000", "223200", "223800", "224000", "224200", "225000", "225300", "225700", "226000", "230000", "232000", "233000", "234000", "235000", "236000", "236800", "237000", "238000", "239000", "241000", "242000", "242700", "243000", "244000", "245000", "246000", "247100", "250000", "252000", "252600", "253000", "253600", "255000", "256600", "257000", "261000", "261400", "262200", "262500", "264000", "264200", "264300", "264400", "265200", "265700", "266000", "266300", "271000", "271100", "271200", "272100", "273100", "274000", "276000", "276800", "277100", "277500", "310000", "311200", "312000", "313000", "314000", "315000", "315300", "315400", "315500", "316000", "317000", "317700", "318000", "321000", "321100", "322000", "322100", "323000", "324000", "325000", "325200", "330000", "331100", "331200", "332000", "333000", "334000", "335000", "336000", "336500", "337000", "341000", "343000", "343600", "344000", "344100", "350000", "351100", "352100", "353000", "354000", "361000", "362000", "362700", "363000", "364000", "365000", "366000", "410000", "411100", "411400", "412000", "412200", "413000", "413100", "414000", "414400", "415000", "415400", "416000", "416600", "417000", "417100", "417500", "418000", "418200", "421000", "422000", "423000", "423400", "425000", "425100", "427000", "430000", "431600", "431700", "432100", "432400", "432600", "432700", "433000", "433100", "433200", "434000", "434100", "434400", "448000", "435000", "436000", "436400", "437000", "437300", "441000", "441200", "441300", "441900", "442000", "443000", "443300", "444100", "445000", "445400", "450000", "461670", "453000", "453100", "453600", "454000", "454650", "455000", "456500", "458000", "457000", "461000", "462000", "463000", "464000", "466000", "467500", "471000", "472000", "472300", "473000", "474150", "475000", "476000", "510000", "511500", "511700", "512000", "514000", "515000", "521000", "516000", "516600", "517000", "518000", "519000", "524000", "525000", "526000", "528000", "528400", "529000", "570000", "571100", "571300", "571400", "571500", "571700", "572000", "572200", "573100", "530000", "532600", "533000", "535000", "536000", "537000", "537100", "538000", "538100", "541000", "543000", "545000", "546500", "547000", "550000", "553000", "554300", "556000", "558000", "561000", "562400", "563000", "610000", "611830", "614000", "614200", "615000", "617000", "618000", "621000", "625000", "628000", "629000", "635000", "637000", "638650", "641000", "643000", "644000", "646000", "650000", "653100", "654100", "655000", "657000", "661000", "661400", "671000", "675000", "678000", "678500", "710000", "712000", "714000", "715400", "716000", "719000", "721000", "723000", "725000", "726000", "727000", "730000", "730900", "731100", "733000", "734000", "735000", "735100", "735200", "736200", "737100", "741000", "744000", "745000", "750000", "751100", "751600", "753000", "810000", "816000", "817000", "830000", "831100", "832000", "833200", "833400", "834000", "834700", "835000", "836500", "838000", "839000", "841000", "843000", "844000", "845350", "848000", "850000", "857000"
        };
        int hashStr = Math.abs(str.hashCode()+hashSalt);
        String s = zip[hashStr % (zip.length - 1)];
        if (isSuangYin == 1){
            s = "\"" + s +"\"";
        }
        if(value instanceof BigDecimal){
            return new BigDecimal(s);
        }else if(value instanceof Long){
            return Long.parseLong(s);
        }else if(value instanceof Double){
            return Double.parseDouble(s);
        }
        return s;
    }
}
