package huanghe.com_name;

/**
 * Created by Administrator on 2016.07.08.
 */
public class ComName2 {

    public static Object getM(Object value, Object key){

        //判断参数是否为null、"null"、"" ,为true时不做处理
        if (value==null||value.equals("null")||value.equals("")) return value;
        String str = value+"";
        str = str.replace(" ", "");
        if (str.length()<2)return value;
        String salt = key + "";
        String saltok = salt.replace(" ", "");
        //盐值hash
        int hashSalt = 0;

        if (salt.length()<1){
            //没有盐值
        }else {
            hashSalt=Math.abs(saltok.hashCode());
        }
        if(str.contains("·")&& str.replace(" ", "").length()<3){
            return value;
        }

//复姓的数组
        String[] contain = {"万俟", "司马", "上官", "欧阳", "夏侯", "诸葛", "闻人", "东方", "赫连", "皇甫", "羊舌", "尉迟", "公羊", "澹台", "公冶", "宗正",
                "濮阳", "淳于", "单于", "太叔", "申屠", "公孙", "仲孙", "轩辕", "令狐", "钟离", "宇文", "长孙", "慕容", "鲜于", "闾丘", "司徒", "司空", "兀官", "司寇",
                "南门", "呼延", "子车", "颛孙", "端木", "巫马", "公西", "漆雕", "车正", "壤驷", "公良", "拓跋", "夹谷", "宰父", "谷梁", "段干", "百里", "东郭", "微生",
                "梁丘", "左丘", "东门", "西门", "南宫", "第五", "公仪", "公乘", "太史", "仲长", "叔孙", "屈突", "尔朱", "东乡", "相里", "胡母", "司城", "张廖", "雍门",
                "毋丘", "贺兰", "綦毋", "屋庐", "独孤", "南郭", "北宫", "王孙"};
        //598 百家姓
        String[] laName= {"赵","钱","孙","李","周","吴","郑","王","冯","陈","蒋","沈","韩","杨","朱","秦","许","何","吕","施","张","孔","曹","严","华","金","魏","姜","谢","邹","喻","苏","潘","葛","范","彭","鲁","韦","马","方","任","袁","柳","史","唐","费","薛","雷","倪","汤","罗","安","常","乐","于","卞","齐","伍","余","元","顾","孟","平","黄","和","穆","萧","尹","姚","邵","汪","毛","狄","米","贝","明","臧","成","戴","宋","茅","庞","熊","纪","舒","项","祝","董","梁","杜","阮","贾","江","郭","林","钟","徐","邱","高","夏","蔡","田","胡","霍","卢","莫","房","缪","解","丁","宣","邓","郁","单","杭","洪","包","石","崔","程","陆","于","曲","封","焦","谷","车","栾","甘","刘","叶","幸","司","白","乔","谭","申","牛","尚","农","温","庄","柴","阎","习","向","古","廖","耿","满","巩","曾","关","岳","楚","佟","高","门"};

        //名字库
        String[] fiName= {"缈","游","温","逸","嵋","瞻","颜","缺","渊","暖","清","觅","观","崧","遥","喻","更","喧","曲","崴","曼","罕","曹","崎","腾","湛","石","崇","喜","飞","飘","善","知",
                "崖","风","矩","道","啸","巡","邦","昭","真","巧","映","巨","春","美","邵","省","昱","羚","溪","昴","羞","昶","眺","昊","源","明","昏","昌","群","昂","昆","昙","星",
                "易","羿","商","州","川","羽","昕","昔","景","晨","顺","翁","晤","顶","翎","页","唱","翔","唯","满","智","唤","晴","都","致","晋","至","晃","唐","晟","西","臣","晖",
                "翼","晓","自","皆","而","皇","袖","耀","馨","山","考","皎","袁","皓","耘","哲","枯","品","林","哈","屑","哉","枚","果","展","枝","极","屋","届","耿","首","耽","屏",
                "枇","香","枋","居","耶","尼","潭","柳","柱","益","盈","咨","查","咱","聚","尧","柯","盛","柔","尘","聪","柒","尚","和","目","尖","酒","少","柚","柄","直","咖","酋",
                "尊","盼","柏","将","封","相","肃","峰","周","朽","峻","朱","朴","未","末","峡","术","肖","本","峪","峨","峭","纱","呈","纳","望","纷","纹","纸","肩","纺","纽","朔",
                "员","月","有","红","朋","服","肴","约","级","纪","纯","启","板","松","结","岳","含","统","绘","岸","杰","细","行","织","组","绅","杭","胜","吴","来","绍","绊","终",
                "条","岩","名","维","同","杜","胥","岗","束","后","杞","吉","合","金","衷","各","绿","釜","材","岛","岚","白","采","百","李","杏","癸","衫","杉","表","君","野","量",
                "吕","里","重","释","绩","向","衣","累","乾","埔","计","紫","氛","订","训","疾","讯","气","索","民","素","书","城","设","访","许","习","论","彭","九","埴","彬","彩",
                "乘","永","彪","彤","乔","彦","乖","培","乐","乓","基","乒","义","茉","久","茄","茅","疏","彷","彰","茂","范","影","茁","主","为","弈","江","高","串","丰","语","荷",
                "临","垂","弘","型","汀","荣","丙","丘","证","诀","业","汽","识","东","评","丞","汾","汴","词","弧","世","弦","强","垣","诗","诚","池","七","万","忆","价","必","坚",
                "仲","町","仰","沐","甲","任","申","沛","田","沙","志","沅","沃","坊","沂","沁","均","莫","沈","甜","仕","生","忠","甘","仑","甚","仓","河","沼","沽","沾","沿","沸",
                "油","念","沧","仁","坪","忽","坤","从","坦","坡","沫","亳","泓","菲","征","泗","径","法","泛","律","徒","徐","产","得","亦","圃","享","泊","徙","亩","泉","徘","亨",
                "亮","圆","略","亭","徜","京","泰","御","留","云","场","泳","徨","地","驰","亚","圳","泽","波","泥","圭","界","德","马","争","注","圣","事","畅","于","般","斗","航",
                "佩","洋","料","文","使","船","洛","舷","舶","洗","回","佳","住","舍","幼","幽","位","洪","新","因","幸","并","年","津","施","璋","平","方","斧","派","洽","舟","佛",
                "余","图","洵","何","国","誉","洲","固","斩","佑","舒","佐","帛","帝","良","济","瓦","伯","传","流","米","浅","伦","伧","浙","师","浚","伺","旅","希","艾","旋","布",
                "市","帅","伴","族","帆","浪","伊","常","浩","时","旷","伏","伍","旺","浣","企","浦","既","伟","旦","席","日","早","旨","海","众","旭","涅","信","琪","芯","芮","芭",
                "俯","芬","修","琦","芫","琢","芷","芳","俱","涓","花","芽","攀","廉","芸","涛","芹","粗","政","润","延","放","粒","琉","节","芍","俏","理","收","俊","建","芊","俗",
                "芒","俐","俞","芝","保","言","芙","粉","嘉","若","庚","府","侯","敖","效","英","瑾","庆","敏","淘","床","苹","故","便","淡","康","庶","庸","庾","侍","苑","苓","深",
                "苔","度","瑞","座","苗","庭","依","央","冶","天","鑫","冰","太","冲","冬","珍","珏","珈","珊","珀","冠","拳","备","路","军","拉","夏","复","冒","拂","多","拓","珠",
                "越","笃","奢","出","奥","函","凰","超","玖","笑","玉","凯","笙","抱","凡","笛","玄","好","率","玻","奂","笠","奇","奋","玫","凌","奔","奕","净","准","资","执","铭",
                "扬","鱼","银","承","赤","扇","才","如","铁","妙","共","姬","兵","其","具","典","钦","兼","姿","全","六","贝","贡","财","贤","成","贵","兆","钟","克","光","先","钗",
                "武","步","正","长","堡","傲","歌","镜","穹","空","镇","堆","堂","欢","欣","次","欧","犁","锦","程","锐","萧","锋","竟","捷","毫","站","闻","倩","闲","蓝","问","豆",
                "门","立","闪","值","竿","牧","竹","牡","竺","倍","毅","物","章","豪","豫","倚","境","健","壮","振","壤","偃","殊","谷","挚","谦","桓","厚","桑","迪","桐","际","原",
                "祥","桔","蝶","桂","桃","祺","迁","迅","进","祖","桦","远","运","神","祟","栗","悉","树","阔","标","悟","字","达","社","孟","孝","参","辰","栋","熙","阡","辉","季",
                "栽","格","叶","悠","台","召","叮","可","孰","校","阳","熊","麦","古","栩","宋","守","秩","安","积","宏","北","雀","雁","轩","匙","宁","秦","宇","棕","棋","宛","恒",
                "定","宙","照","实","宝","宜","轻","宗","鹏","雪","秉","雨","宫","秋","秀","恩","客","宣","煜","鹿","恭","息","容","恰","鹤","科","棠","家","南","卓","隆","寂","博",
                "梓","升","禾","千","十","禹","华","梅","思","寒","梁","卉","福","卷","印","怡","梵","卿","鸽","卸","梳","梭","梯","融","卦","鸣","梨","寺","梧","卫","烨","青","靖",
                "威","娄","功","虹","努","烈","娱","懿","硕","加","务","虎","虔","硅","革","劲","励","炬","霖","炯","勉","炫","勋","霜","勇","霄","龙","炎","婷","研","勤","齐","列",
                "慈","则","刚","创","初","慎","灿","蛋","别","利","音","韵","韶","磊","韬","制","韦","前","鼎","意","瀚"};

         /*  公司名 */
        String[] Surname= {"缈","游","温","逸","嵋","瞻","颜","缺","渊","暖","清","觅","观","崧","遥","喻","更","喧","曲","崴","曼","罕","曹","崎","腾","湛","石","崇","喜","飞","飘","善","知",
                "崖","风","矩","道","啸","巡","邦","昭","真","巧","映","巨","春","美","邵","省","昱","羚","溪","昴","羞","昶","眺","昊","源","明","昏","昌","群","昂","昆","昙","星",
                "易","羿","商","州","川","羽","昕","昔","景","晨","顺","翁","晤","顶","翎","页","唱","翔","唯","满","智","唤","晴","都","致","晋","至","晃","唐","晟","西","臣","晖",
                "翼","晓","自","皆","而","皇","袖","耀","馨","山","考","皎","袁","皓","耘","哲","枯","品","林","哈","屑","哉","枚","果","展","枝","极","屋","届","耿","首","耽","屏",
                "枇","香","枋","居","耶","尼","潭","柳","柱","益","盈","咨","查","咱","聚","尧","柯","盛","柔","尘","聪","柒","尚","和","目","尖","酒","少","柚","柄","直","咖","酋",
                "尊","盼","柏","将","封","相","肃","峰","周","朽","峻","朱","朴","未","末","峡","术","肖","本","峪","峨","峭","纱","呈","纳","望","纷","纹","纸","肩","纺","纽","朔",
                "员","月","有","红","朋","服","肴","约","级","纪","纯","启","板","松","结","岳","含","统","绘","岸","杰","细","行","织","组","绅","杭","胜","吴","来","绍","绊","终",
                "条","岩","名","维","同","杜","胥","岗","束","后","杞","吉","合","金","衷","各","绿","釜","材","岛","岚","白","采","百","李","杏","癸","衫","杉","表","君","野","量",
                "吕","里","重","释","绩","向","衣","累","乾","埔","计","紫","氛","订","训","疾","讯","气","索","民","素","书","城","设","访","许","习","论","彭","九","埴","彬","彩",
                "乘","永","彪","彤","乔","彦","乖","培","乐","乓","基","乒","义","茉","久","茄","茅","疏","彷","彰","茂","范","影","茁","主","为","弈","江","高","串","丰","语","荷",
                "临","垂","弘","型","汀","荣","丙","丘","证","诀","业","汽","识","东","评","丞","汾","汴","词","弧","世","弦","强","垣","诗","诚","池","七","万","忆","价","必","坚",
                "仲","町","仰","沐","甲","任","申","沛","田","沙","志","沅","沃","坊","沂","沁","均","莫","沈","甜","仕","生","忠","甘","仑","甚","仓","河","沼","沽","沾","沿","沸",
                "油","念","沧","仁","坪","忽","坤","从","坦","坡","沫","亳","泓","菲","征","泗","径","法","泛","律","徒","徐","产","得","亦","圃","享","泊","徙","亩","泉","徘","亨",
                "亮","圆","略","亭","徜","京","泰","御","留","云","场","泳","徨","地","驰","亚","圳","泽","波","泥","圭","界","德","马","争","注","圣","事","畅","于","般","斗","航",
                "佩","洋","料","文","使","船","洛","舷","舶","洗","回","佳","住","舍","幼","幽","位","洪","新","因","幸","并","年","津","施","璋","平","方","斧","派","洽","舟","佛",
                "余","图","洵","何","国","誉","洲","固","斩","佑","舒","佐","帛","帝","良","济","瓦","伯","传","流","米","浅","伦","伧","浙","师","浚","伺","旅","希","艾","旋","布",
                "市","帅","伴","族","帆","浪","伊","常","浩","时","旷","伏","伍","旺","浣","企","浦","既","伟","旦","席","日","早","旨","海","众","旭","涅","信","琪","芯","芮","芭",
                "俯","芬","修","琦","芫","琢","芷","芳","俱","涓","花","芽","攀","廉","芸","涛","芹","粗","政","润","延","放","粒","琉","节","芍","俏","理","收","俊","建","芊","俗",
                "芒","俐","俞","芝","保","言","芙","粉","嘉","若","庚","府","侯","敖","效","英","瑾","庆","敏","淘","床","苹","故","便","淡","康","庶","庸","庾","侍","苑","苓","深",
                "苔","度","瑞","座","苗","庭","依","央","冶","天","鑫","冰","太","冲","冬","珍","珏","珈","珊","珀","冠","拳","备","路","军","拉","夏","复","冒","拂","多","拓","珠",
                "越","笃","奢","出","奥","函","凰","超","玖","笑","玉","凯","笙","抱","凡","笛","玄","好","率","玻","奂","笠","奇","奋","玫","凌","奔","奕","净","准","资","执","铭",
                "扬","鱼","银","承","赤","扇","才","如","铁","妙","共","姬","兵","其","具","典","钦","兼","姿","全","六","贝","贡","财","贤","成","贵","兆","钟","克","光","先","钗",
                "武","步","正","长","堡","傲","歌","镜","穹","空","镇","堆","堂","欢","欣","次","欧","犁","锦","程","锐","萧","锋","竟","捷","毫","站","闻","倩","闲","蓝","问","豆",
                "门","立","闪","值","竿","牧","竹","牡","竺","倍","毅","物","章","豪","豫","倚","境","健","壮","振","壤","偃","殊","谷","挚","谦","桓","厚","桑","迪","桐","际","原",
                "祥","桔","蝶","桂","桃","祺","迁","迅","进","祖","桦","远","运","神","祟","栗","悉","树","阔","标","悟","字","达","社","孟","孝","参","辰","栋","熙","阡","辉","季",
                "栽","格","叶","悠","台","召","叮","可","孰","校","阳","熊","麦","古","栩","宋","守","秩","安","积","宏","北","雀","雁","轩","匙","宁","秦","宇","棕","棋","宛","恒",
                "定","宙","照","实","宝","宜","轻","宗","鹏","雪","秉","雨","宫","秋","秀","恩","客","宣","煜","鹿","恭","息","容","恰","鹤","科","棠","家","南","卓","隆","寂","博",
                "梓","升","禾","千","十","禹","华","梅","思","寒","梁","卉","福","卷","印","怡","梵","卿","鸽","卸","梳","梭","梯","融","卦","鸣","梨","寺","梧","卫","烨","青","靖",
                "威","娄","功","虹","努","烈","娱","懿","硕","加","务","虎","虔","硅","革","劲","励","炬","霖","炯","勉","炫","勋","霜","勇","霄","龙","炎","婷","研","勤","齐","列",
                "慈","则","刚","创","初","慎","灿","蛋","别","利","音","韵","韶","磊","韬","制","韦","前","鼎","意","瀚"};

        //验证是否清洗的数组
        String[] noChange = {"市场","电器","汽车","销售","广播","电视","器材","粮油","机电","设备","经营部","珠宝","农场","竹纤维","宾馆","天窗","幕墙","商贸","胶粘","制品","节能","防水","路桥","化工","电动车","商行","土特产","印务","建材","建设","工程","咨询","农业","科技","电子","木业","印刷","矿业","连锁","超市","加盟店","文化","传播","农资店","瓜果","流通","专业","中卫","中心","二手","互助社","交通","保洁","公司","养殖","内蒙古","农村","农民","制造","副食品","南寺","发展","合作社","吴忠","商业","园林","固原","宁夏","实业","家私","小额","工程","批发部","支行","景观","有限","服务","村级","果蔬","清真","清真寺","物资","石嘴山","种植","管理","经营部","经销部","股份","自治县","苗木","蒙古族","贷款","资产","资金","车行","银川","银行","陶瓷","集团","青铜峡","餐饮"
        };
        String[] noChange1 = {"镇","乡","村","市","县","区"
        };
        String[] noChange2 = {"市场","电器","汽车","销售","广播","电视","器材","粮油","机电","设备","珠宝","农场","宾馆","天窗","幕墙","商贸","胶粘","制品","节能","防水","路桥","化工","商行","印务","建材","建设","工程","咨询","农业","科技","电子","木业","印刷","矿业","连锁","超市","文化","传播","瓜果","流通","专业","中卫","中心","二手","交通","保洁","公司","养殖","农村","农民","制造","南寺","发展","吴忠","商业","园林","固原","宁夏","实业","家私","小额","工程","支行","景观","有限","服务","村级","果蔬","清真","物资","种植","管理","股份","苗木","贷款","资产","资金","车行","银川","银行","陶瓷","集团","餐饮"
        };
        String[] noChange3 = {"经营部","竹纤维","电动车","土特产","加盟店","农资店","互助社","内蒙古","副食品","合作社","批发部","清真寺","石嘴山","经营部","经销部","自治县","蒙古族","青铜峡"};

        String newName="";

        //验证是否为公司
        int company = 0;

        for (int i = 0; i < noChange.length; i++) {
            if (str.contains(noChange[i])&&str.length()>5){
                company =1;
                break;
            }
        }
        if (company != 0) {

            String[] arrStr = new String[str.length()];
            for (int i = 0; i < arrStr.length; i++) {
                arrStr[i] = str.substring(i, i + 1);
            }

            for (int i = 0; i < arrStr.length; i++) {
                int temp = 0;
                try {
                    for (int j = 0; j < noChange3.length; j++) {
                        if (arrStr[i].contains(noChange3[j].substring(0, 1)) && arrStr[i + 1].contains(noChange3[j].substring(1, 2)) && arrStr[i + 2].contains(noChange3[j].substring(2, 3))) {
                            i += 2;
                            temp = 1;
                            break;
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    i += 2;
                    continue;
                }
                try {
                    for (int j = 0; j < noChange2.length; j++) {
                        if (arrStr[i].contains(noChange2[j].substring(0, 1)) && arrStr[i + 1].contains(noChange2[j].substring(1, 2))) {
                            i += 1;
                            temp = 1;
                            break;
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    i += 1;
                    continue;
                }
                for (int j = 0; j < noChange1.length; j++) {
                    if (arrStr[i].contains(noChange1[j])) {
                        temp = 1;
                        break;
                    }
                }
                if (temp == 0) {
                    int hashTemp = Math.abs(arrStr[i].hashCode() + hashSalt);
                    arrStr[i] = Surname[hashTemp % (Surname.length - 1)];
                }


            }
            for (int i = 0; i < arrStr.length; i++) {
                newName += arrStr[i];
            }

            return newName;
        }else{


            //特殊字符
            boolean isSpecial = false;
            //复姓
            boolean isTwoName = false;
            //少数民族
            boolean isRareName = false;

            String lastName = "";
            String firstName = "";

            int lastNameHashCode = 0;
            int firstNameHashCode = 0;

            //判断是否含有特殊字符
            java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("[0-9]*[A-Za-z]*[`~!@#$%^&*()+=|{}':;',\\\\[\\\\].<>/?~！@#￥%……&*（）——+|{}【】‘；：”“’。，、？]*");
            for (int i = 0; i < str.length(); i++) {
                java.util.regex.Matcher matcher = pattern.matcher(str.substring(i, i + 1));
                boolean matches = matcher.matches();
                if (matches) {
                    isSpecial = matches;
                    break;
                }
            }
            //判断是否是复姓
            for (int i = 0; i < contain.length; i++) {
                if (str.contains(contain[i])) {
                    isTwoName = true;
                }
            }
            //判断是否是少数民族“·”
            if (str.contains("·")) {
                isRareName = true;
            }
            //正常名字
            //复姓名字
            //少数民族名字
            if (!isSpecial) {
                lastName = str.substring(0, 1);
                firstName = str.substring(1, str.length());
                if (isTwoName) {
                    lastName = str.substring(0, 2);
                    firstName = str.substring(2, str.length());
                }
                if (isRareName) {
                    String regex = "·";
                    String strAry[] = str.split(regex);
                    if (strAry.length == 2) {
                        lastName = strAry[0];
                        firstName = strAry[1];
                    } else {
                        return value;
                    }
                }

                //少数民族拼新名字
                if (isRareName) {
                    for (int i = 0; i < lastName.length(); i++) {
                        firstNameHashCode = Math.abs(lastName.substring(i, i + 1).hashCode() + hashSalt);
                        newName += fiName[firstNameHashCode % (fiName.length - 1)];
                    }
                    newName += "·";
                    for (int i = 0; i < firstName.length(); i++) {
                        firstNameHashCode = Math.abs(firstName.substring(i, i + 1).hashCode() + hashSalt);
                        newName += fiName[firstNameHashCode % (fiName.length - 1)];
                    }
                } else {
                    lastNameHashCode = Math.abs(lastName.hashCode() + hashSalt);//姓取正数
                    newName = laName[lastNameHashCode % (laName.length - 1)]; //获得一个固定的姓氏
                    if (isTwoName) {
                        newName = contain[lastNameHashCode % (contain.length - 1)]; //获得一个固定的姓氏
                    }
                    for (int i = 0; i < firstName.length(); i++) {
                        firstNameHashCode = Math.abs(firstName.substring(i, i + 1).hashCode() + hashSalt);
                        newName += fiName[firstNameHashCode % (fiName.length - 1)];
                    }
                }
            }
            //正常名字带特殊字符
            //复姓名字带特殊字符
            //少数民族名字带特殊字符
            //判断汉字
            java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("[\\u4e00-\\u9fa5]");

            if (isSpecial) {
                int temp = 0;
                //根据以上判断截取每个字符放入数组
                String[] nameArray = new String[str.length()];
                for (int i = 0; i < str.length(); i++) {
                    nameArray[i] = str.substring(i, i + 1);
                }
                if (isTwoName) {
                    for (int i = 0; i < nameArray.length; i++) {
                        java.util.regex.Matcher matcher1 = pattern1.matcher(nameArray[i]);
                        boolean matches1 = matcher1.matches();

                        if (matches1 && temp == 1) {
                            firstName = nameArray[i];
                            firstNameHashCode = Math.abs(firstName.hashCode() + hashSalt);//名取正数
                            newName = fiName[firstNameHashCode % (fiName.length - 1)]; //获得一个固定的姓名字
                            nameArray[i] = newName.substring(0);
                        }

                        if (matches1 && temp == 0) {
                            lastName = nameArray[i] + nameArray[i + 1];
                            lastNameHashCode = Math.abs(lastName.hashCode() + hashSalt);//姓取正数
                            newName = contain[lastNameHashCode % (contain.length - 1)]; //获得一个固定的姓氏
                            nameArray[i] = newName.substring(0, 1);
                            nameArray[i + 1] = newName.substring(1, 2);
                            i += 1;
                            temp += 1;
                        }
                    }
                }

                if (isRareName) {

                    for (int i = 0; i < nameArray.length; i++) {
                        java.util.regex.Matcher matcher1 = pattern1.matcher(nameArray[i]);
                        boolean matches1 = matcher1.matches();

                        if (matches1) {
                            firstName = nameArray[i];
                            firstNameHashCode = Math.abs(firstName.hashCode() + hashSalt);//名取正数
                            nameArray[i] = fiName[firstNameHashCode % (fiName.length - 1)]; //获得一个固定的姓名字
                        }
                    }
                }

                for (int i = 0; i < nameArray.length; i++) {
                    java.util.regex.Matcher matcher1 = pattern1.matcher(nameArray[i]);
                    boolean matches1 = matcher1.matches();

                    if (matches1 && temp == 1) {
                        firstName = nameArray[i];
                        firstNameHashCode = Math.abs(firstName.hashCode() + hashSalt);//名取正数
                        newName = fiName[firstNameHashCode % (fiName.length - 1)]; //获得一个固定的姓名字
                        nameArray[i] = newName.substring(0);
                    }

                    if (matches1 && temp == 0) {
                        lastName = nameArray[i];
                        lastNameHashCode = Math.abs(lastName.hashCode() + hashSalt);//姓取正数
                        newName = laName[lastNameHashCode % (laName.length - 1)]; //获得一个固定的姓氏
                        nameArray[i] = newName.substring(0, 1);
                        temp += 1;
                    }

                }
                //生成String类型新名字
                newName = "";
                for (int i = 0; i < nameArray.length; i++) {
                    newName += nameArray[i];
                }
            }
            return newName;
        }




    }

}
