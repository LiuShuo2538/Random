package version3.Name;

/**
 * 个人公司混合名过滤算法
 * Created by zhengbing on 2016/6/21.
 * 08/16丰富词库
 */
public class NameENameCompositeFilterAlgorithm {

    public static Object getModelComName(Object value, Object key) throws Exception {

        if (value == null || value.equals("null") || value.equals("")) return "";
        String str = value + "";
        str = str.replaceAll("\\s*", "");
        str = str.replaceAll("\\u3000", "");
        int isSuangYin = 0;
        if (str.endsWith("\"") && str.startsWith("\"")) {
            str = str.substring(1, str.length() - 1);
            isSuangYin = 1;
        }
        if (str.length() < 2) return value;
        String salt = key + "";
        String saltok = salt.replaceAll("\\s*", "");
        int hashSalt = 0;
        if (salt == null || salt.equals("null") || salt.equals("")) {
        } else {
            hashSalt = Math.abs(saltok.hashCode());
        }

        if (str.contains("·") && str.replace(" ", "").length() < 3) {
            return value;
        }

//复姓的数组
        String[] contain = {"万俟", "司马", "上官", "欧阳", "夏侯", "诸葛", "闻人", "东方", "赫连", "皇甫", "羊舌", "尉迟", "公羊", "澹台", "公冶", "宗正",
                "濮阳", "淳于", "单于", "太叔", "申屠", "公孙", "仲孙", "轩辕", "令狐", "钟离", "宇文", "长孙", "慕容", "鲜于", "闾丘", "司徒", "司空", "兀官", "司寇",
                "南门", "呼延", "子车", "颛孙", "端木", "巫马", "公西", "漆雕", "车正", "壤驷", "公良", "拓跋", "夹谷", "宰父", "谷梁", "段干", "百里", "东郭", "微生",
                "梁丘", "左丘", "东门", "西门", "南宫", "第五", "公仪", "公乘", "太史", "仲长", "叔孙", "屈突", "尔朱", "东乡", "相里", "胡母", "司城", "张廖", "雍门",
                "毋丘", "贺兰", "綦毋", "屋庐", "独孤", "南郭", "北宫", "王孙"};
//598 百家姓
        String[] laName = {"赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "蒋", "沈", "韩", "杨", "朱", "秦", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏", "姜", "谢", "邹", "喻", "苏", "潘", "葛", "范", "彭", "鲁", "韦", "马", "方", "任", "袁", "柳", "史", "唐", "费", "薛", "雷", "倪", "汤", "罗", "安", "常", "乐", "于", "卞", "齐", "伍", "余", "元", "顾", "孟", "平", "黄", "和", "穆", "萧", "尹", "姚", "邵", "汪", "毛", "狄", "米", "贝", "明", "臧", "成", "戴", "宋", "茅", "庞", "熊", "纪", "舒", "项", "祝", "董", "梁", "杜", "阮", "贾", "江", "郭", "林", "钟", "徐", "邱", "高", "夏", "蔡", "田", "胡", "霍", "卢", "莫", "房", "缪", "解", "丁", "宣", "邓", "郁", "单", "杭", "洪", "包", "石", "崔", "程", "陆", "于", "曲", "封", "焦", "谷", "车", "栾", "甘", "刘", "叶", "幸", "司", "白", "乔", "谭", "申", "牛", "尚", "农", "温", "庄", "柴", "阎", "习", "向", "古", "廖", "耿", "满", "巩", "曾", "关", "岳", "楚", "佟", "高", "门"};

//名字库
        String[] fiName = {"缈", "游", "温", "逸", "嵋", "瞻", "颜", "缺", "渊", "暖", "清", "觅", "观", "崧", "遥", "喻", "更", "喧", "曲", "崴", "曼", "罕", "曹", "崎", "腾", "湛", "石", "崇", "喜", "飞", "飘", "善", "知",
                "崖", "风", "矩", "道", "啸", "巡", "邦", "昭", "真", "巧", "映", "巨", "春", "美", "邵", "省", "昱", "羚", "溪", "昴", "羞", "昶", "眺", "昊", "源", "明", "昏", "昌", "群", "昂", "昆", "昙", "星",
                "易", "羿", "商", "州", "川", "羽", "昕", "昔", "景", "晨", "顺", "翁", "晤", "顶", "翎", "页", "唱", "翔", "唯", "满", "智", "唤", "晴", "都", "致", "晋", "至", "晃", "唐", "晟", "西", "臣", "晖",
                "翼", "晓", "自", "皆", "而", "皇", "袖", "耀", "馨", "山", "考", "皎", "袁", "皓", "耘", "哲", "枯", "品", "林", "哈", "屑", "哉", "枚", "果", "展", "枝", "极", "屋", "届", "耿", "首", "耽", "屏",
                "枇", "香", "枋", "居", "耶", "尼", "潭", "柳", "柱", "益", "盈", "咨", "查", "咱", "聚", "尧", "柯", "盛", "柔", "尘", "聪", "柒", "尚", "和", "目", "尖", "酒", "少", "柚", "柄", "直", "咖", "酋",
                "尊", "盼", "柏", "将", "封", "相", "肃", "峰", "周", "朽", "峻", "朱", "朴", "未", "末", "峡", "术", "肖", "本", "峪", "峨", "峭", "纱", "呈", "纳", "望", "纷", "纹", "纸", "肩", "纺", "纽", "朔",
                "员", "月", "有", "红", "朋", "服", "肴", "约", "级", "纪", "纯", "启", "板", "松", "结", "岳", "含", "统", "绘", "岸", "杰", "细", "行", "织", "组", "绅", "杭", "胜", "吴", "来", "绍", "绊", "终",
                "条", "岩", "名", "维", "同", "杜", "胥", "岗", "束", "后", "杞", "吉", "合", "金", "衷", "各", "绿", "釜", "材", "岛", "岚", "白", "采", "百", "李", "杏", "癸", "衫", "杉", "表", "君", "野", "量",
                "吕", "里", "重", "释", "绩", "向", "衣", "累", "乾", "埔", "计", "紫", "氛", "订", "训", "疾", "讯", "气", "索", "民", "素", "书", "城", "设", "访", "许", "习", "论", "彭", "九", "埴", "彬", "彩",
                "乘", "永", "彪", "彤", "乔", "彦", "乖", "培", "乐", "乓", "基", "乒", "义", "茉", "久", "茄", "茅", "疏", "彷", "彰", "茂", "范", "影", "茁", "主", "为", "弈", "江", "高", "串", "丰", "语", "荷",
                "临", "垂", "弘", "型", "汀", "荣", "丙", "丘", "证", "诀", "业", "汽", "识", "东", "评", "丞", "汾", "汴", "词", "弧", "世", "弦", "强", "垣", "诗", "诚", "池", "七", "万", "忆", "价", "必", "坚",
                "仲", "町", "仰", "沐", "甲", "任", "申", "沛", "田", "沙", "志", "沅", "沃", "坊", "沂", "沁", "均", "莫", "沈", "甜", "仕", "生", "忠", "甘", "仑", "甚", "仓", "河", "沼", "沽", "沾", "沿", "沸",
                "油", "念", "沧", "仁", "坪", "忽", "坤", "从", "坦", "坡", "沫", "亳", "泓", "菲", "征", "泗", "径", "法", "泛", "律", "徒", "徐", "产", "得", "亦", "圃", "享", "泊", "徙", "亩", "泉", "徘", "亨",
                "亮", "圆", "略", "亭", "徜", "京", "泰", "御", "留", "云", "场", "泳", "徨", "地", "驰", "亚", "圳", "泽", "波", "泥", "圭", "界", "德", "马", "争", "注", "圣", "事", "畅", "于", "般", "斗", "航",
                "佩", "洋", "料", "文", "使", "船", "洛", "舷", "舶", "洗", "回", "佳", "住", "舍", "幼", "幽", "位", "洪", "新", "因", "幸", "并", "年", "津", "施", "璋", "平", "方", "斧", "派", "洽", "舟", "佛",
                "余", "图", "洵", "何", "国", "誉", "洲", "固", "斩", "佑", "舒", "佐", "帛", "帝", "良", "济", "瓦", "伯", "传", "流", "米", "浅", "伦", "伧", "浙", "师", "浚", "伺", "旅", "希", "艾", "旋", "布",
                "市", "帅", "伴", "族", "帆", "浪", "伊", "常", "浩", "时", "旷", "伏", "伍", "旺", "浣", "企", "浦", "既", "伟", "旦", "席", "日", "早", "旨", "海", "众", "旭", "涅", "信", "琪", "芯", "芮", "芭",
                "俯", "芬", "修", "琦", "芫", "琢", "芷", "芳", "俱", "涓", "花", "芽", "攀", "廉", "芸", "涛", "芹", "粗", "政", "润", "延", "放", "粒", "琉", "节", "芍", "俏", "理", "收", "俊", "建", "芊", "俗",
                "芒", "俐", "俞", "芝", "保", "言", "芙", "粉", "嘉", "若", "庚", "府", "侯", "敖", "效", "英", "瑾", "庆", "敏", "淘", "床", "苹", "故", "便", "淡", "康", "庶", "庸", "庾", "侍", "苑", "苓", "深",
                "苔", "度", "瑞", "座", "苗", "庭", "依", "央", "冶", "天", "鑫", "冰", "太", "冲", "冬", "珍", "珏", "珈", "珊", "珀", "冠", "拳", "备", "路", "军", "拉", "夏", "复", "冒", "拂", "多", "拓", "珠",
                "越", "笃", "奢", "出", "奥", "函", "凰", "超", "玖", "笑", "玉", "凯", "笙", "抱", "凡", "笛", "玄", "好", "率", "玻", "奂", "笠", "奇", "奋", "玫", "凌", "奔", "奕", "净", "准", "资", "执", "铭",
                "扬", "鱼", "银", "承", "赤", "扇", "才", "如", "铁", "妙", "共", "姬", "兵", "其", "具", "典", "钦", "兼", "姿", "全", "六", "贝", "贡", "财", "贤", "成", "贵", "兆", "钟", "克", "光", "先", "钗",
                "武", "步", "正", "长", "堡", "傲", "歌", "镜", "穹", "空", "镇", "堆", "堂", "欢", "欣", "次", "欧", "犁", "锦", "程", "锐", "萧", "锋", "竟", "捷", "毫", "站", "闻", "倩", "闲", "蓝", "问", "豆",
                "门", "立", "闪", "值", "竿", "牧", "竹", "牡", "竺", "倍", "毅", "物", "章", "豪", "豫", "倚", "境", "健", "壮", "振", "壤", "偃", "殊", "谷", "挚", "谦", "桓", "厚", "桑", "迪", "桐", "际", "原",
                "祥", "桔", "蝶", "桂", "桃", "祺", "迁", "迅", "进", "祖", "桦", "远", "运", "神", "祟", "栗", "悉", "树", "阔", "标", "悟", "字", "达", "社", "孟", "孝", "参", "辰", "栋", "熙", "阡", "辉", "季",
                "栽", "格", "叶", "悠", "台", "召", "叮", "可", "孰", "校", "阳", "熊", "麦", "古", "栩", "宋", "守", "秩", "安", "积", "宏", "北", "雀", "雁", "轩", "匙", "宁", "秦", "宇", "棕", "棋", "宛", "恒",
                "定", "宙", "照", "实", "宝", "宜", "轻", "宗", "鹏", "雪", "秉", "雨", "宫", "秋", "秀", "恩", "客", "宣", "煜", "鹿", "恭", "息", "容", "恰", "鹤", "科", "棠", "家", "南", "卓", "隆", "寂", "博",
                "梓", "升", "禾", "千", "十", "禹", "华", "梅", "思", "寒", "梁", "卉", "福", "卷", "印", "怡", "梵", "卿", "鸽", "卸", "梳", "梭", "梯", "融", "卦", "鸣", "梨", "寺", "梧", "卫", "烨", "青", "靖",
                "威", "娄", "功", "虹", "努", "烈", "娱", "懿", "硕", "加", "务", "虎", "虔", "硅", "革", "劲", "励", "炬", "霖", "炯", "勉", "炫", "勋", "霜", "勇", "霄", "龙", "炎", "婷", "研", "勤", "齐", "列",
                "慈", "则", "刚", "创", "初", "慎", "灿", "蛋", "别", "利", "音", "韵", "韶", "磊", "韬", "制", "韦", "前", "鼎", "意", "瀚"};

/*  公司名 */
        String[] Surname = {"缈", "游", "温", "逸", "嵋", "瞻", "颜", "缺", "渊", "暖", "清", "觅", "观", "崧", "遥", "喻", "更", "喧", "曲", "崴", "曼", "罕", "曹", "崎", "腾", "湛", "石", "崇", "喜", "飞", "飘", "善", "知",
                "崖", "风", "矩", "道", "啸", "巡", "邦", "昭", "真", "巧", "映", "巨", "春", "美", "邵", "省", "昱", "羚", "溪", "昴", "羞", "昶", "眺", "昊", "源", "明", "昏", "昌", "群", "昂", "昆", "昙", "星",
                "易", "羿", "商", "州", "川", "羽", "昕", "昔", "景", "晨", "顺", "翁", "晤", "顶", "翎", "页", "唱", "翔", "唯", "满", "智", "唤", "晴", "都", "致", "晋", "至", "晃", "唐", "晟", "西", "臣", "晖",
                "翼", "晓", "自", "皆", "而", "皇", "袖", "耀", "馨", "山", "考", "皎", "袁", "皓", "耘", "哲", "枯", "品", "林", "哈", "屑", "哉", "枚", "果", "展", "枝", "极", "屋", "届", "耿", "首", "耽", "屏",
                "枇", "香", "枋", "居", "耶", "尼", "潭", "柳", "柱", "益", "盈", "咨", "查", "咱", "聚", "尧", "柯", "盛", "柔", "尘", "聪", "柒", "尚", "和", "目", "尖", "酒", "少", "柚", "柄", "直", "咖", "酋",
                "尊", "盼", "柏", "将", "封", "相", "肃", "峰", "周", "朽", "峻", "朱", "朴", "未", "末", "峡", "术", "肖", "本", "峪", "峨", "峭", "纱", "呈", "纳", "望", "纷", "纹", "纸", "肩", "纺", "纽", "朔",
                "员", "月", "有", "红", "朋", "服", "肴", "约", "级", "纪", "纯", "启", "板", "松", "结", "岳", "含", "统", "绘", "岸", "杰", "细", "行", "织", "组", "绅", "杭", "胜", "吴", "来", "绍", "绊", "终",
                "条", "岩", "名", "维", "同", "杜", "胥", "岗", "束", "后", "杞", "吉", "合", "金", "衷", "各", "绿", "釜", "材", "岛", "岚", "白", "采", "百", "李", "杏", "癸", "衫", "杉", "表", "君", "野", "量",
                "吕", "里", "重", "释", "绩", "向", "衣", "累", "乾", "埔", "计", "紫", "氛", "订", "训", "疾", "讯", "气", "索", "民", "素", "书", "城", "设", "访", "许", "习", "论", "彭", "九", "埴", "彬", "彩",
                "乘", "永", "彪", "彤", "乔", "彦", "乖", "培", "乐", "乓", "基", "乒", "义", "茉", "久", "茄", "茅", "疏", "彷", "彰", "茂", "范", "影", "茁", "主", "为", "弈", "江", "高", "串", "丰", "语", "荷",
                "临", "垂", "弘", "型", "汀", "荣", "丙", "丘", "证", "诀", "业", "汽", "识", "东", "评", "丞", "汾", "汴", "词", "弧", "世", "弦", "强", "垣", "诗", "诚", "池", "七", "万", "忆", "价", "必", "坚",
                "仲", "町", "仰", "沐", "甲", "任", "申", "沛", "田", "沙", "志", "沅", "沃", "坊", "沂", "沁", "均", "莫", "沈", "甜", "仕", "生", "忠", "甘", "仑", "甚", "仓", "河", "沼", "沽", "沾", "沿", "沸",
                "油", "念", "沧", "仁", "坪", "忽", "坤", "从", "坦", "坡", "沫", "亳", "泓", "菲", "征", "泗", "径", "法", "泛", "律", "徒", "徐", "产", "得", "亦", "圃", "享", "泊", "徙", "亩", "泉", "徘", "亨",
                "亮", "圆", "略", "亭", "徜", "京", "泰", "御", "留", "云", "场", "泳", "徨", "地", "驰", "亚", "圳", "泽", "波", "泥", "圭", "界", "德", "马", "争", "注", "圣", "事", "畅", "于", "般", "斗", "航",
                "佩", "洋", "料", "文", "使", "船", "洛", "舷", "舶", "洗", "回", "佳", "住", "舍", "幼", "幽", "位", "洪", "新", "因", "幸", "并", "年", "津", "施", "璋", "平", "方", "斧", "派", "洽", "舟", "佛",
                "余", "图", "洵", "何", "国", "誉", "洲", "固", "斩", "佑", "舒", "佐", "帛", "帝", "良", "济", "瓦", "伯", "传", "流", "米", "浅", "伦", "伧", "浙", "师", "浚", "伺", "旅", "希", "艾", "旋", "布",
                "市", "帅", "伴", "族", "帆", "浪", "伊", "常", "浩", "时", "旷", "伏", "伍", "旺", "浣", "企", "浦", "既", "伟", "旦", "席", "日", "早", "旨", "海", "众", "旭", "涅", "信", "琪", "芯", "芮", "芭",
                "俯", "芬", "修", "琦", "芫", "琢", "芷", "芳", "俱", "涓", "花", "芽", "攀", "廉", "芸", "涛", "芹", "粗", "政", "润", "延", "放", "粒", "琉", "节", "芍", "俏", "理", "收", "俊", "建", "芊", "俗",
                "芒", "俐", "俞", "芝", "保", "言", "芙", "粉", "嘉", "若", "庚", "府", "侯", "敖", "效", "英", "瑾", "庆", "敏", "淘", "床", "苹", "故", "便", "淡", "康", "庶", "庸", "庾", "侍", "苑", "苓", "深",
                "苔", "度", "瑞", "座", "苗", "庭", "依", "央", "冶", "天", "鑫", "冰", "太", "冲", "冬", "珍", "珏", "珈", "珊", "珀", "冠", "拳", "备", "路", "军", "拉", "夏", "复", "冒", "拂", "多", "拓", "珠",
                "越", "笃", "奢", "出", "奥", "函", "凰", "超", "玖", "笑", "玉", "凯", "笙", "抱", "凡", "笛", "玄", "好", "率", "玻", "奂", "笠", "奇", "奋", "玫", "凌", "奔", "奕", "净", "准", "资", "执", "铭",
                "扬", "鱼", "银", "承", "赤", "扇", "才", "如", "铁", "妙", "共", "姬", "兵", "其", "具", "典", "钦", "兼", "姿", "全", "六", "贝", "贡", "财", "贤", "成", "贵", "兆", "钟", "克", "光", "先", "钗",
                "武", "步", "正", "长", "堡", "傲", "歌", "镜", "穹", "空", "镇", "堆", "堂", "欢", "欣", "次", "欧", "犁", "锦", "程", "锐", "萧", "锋", "竟", "捷", "毫", "站", "闻", "倩", "闲", "蓝", "问", "豆",
                "门", "立", "闪", "值", "竿", "牧", "竹", "牡", "竺", "倍", "毅", "物", "章", "豪", "豫", "倚", "境", "健", "壮", "振", "壤", "偃", "殊", "谷", "挚", "谦", "桓", "厚", "桑", "迪", "桐", "际", "原",
                "祥", "桔", "蝶", "桂", "桃", "祺", "迁", "迅", "进", "祖", "桦", "远", "运", "神", "祟", "栗", "悉", "树", "阔", "标", "悟", "字", "达", "社", "孟", "孝", "参", "辰", "栋", "熙", "阡", "辉", "季",
                "栽", "格", "叶", "悠", "台", "召", "叮", "可", "孰", "校", "阳", "熊", "麦", "古", "栩", "宋", "守", "秩", "安", "积", "宏", "北", "雀", "雁", "轩", "匙", "宁", "秦", "宇", "棕", "棋", "宛", "恒",
                "定", "宙", "照", "实", "宝", "宜", "轻", "宗", "鹏", "雪", "秉", "雨", "宫", "秋", "秀", "恩", "客", "宣", "煜", "鹿", "恭", "息", "容", "恰", "鹤", "科", "棠", "家", "南", "卓", "隆", "寂", "博",
                "梓", "升", "禾", "千", "十", "禹", "华", "梅", "思", "寒", "梁", "卉", "福", "卷", "印", "怡", "梵", "卿", "鸽", "卸", "梳", "梭", "梯", "融", "卦", "鸣", "梨", "寺", "梧", "卫", "烨", "青", "靖",
                "威", "娄", "功", "虹", "努", "烈", "娱", "懿", "硕", "加", "务", "虎", "虔", "硅", "革", "劲", "励", "炬", "霖", "炯", "勉", "炫", "勋", "霜", "勇", "霄", "龙", "炎", "婷", "研", "勤", "齐", "列",
                "慈", "则", "刚", "创", "初", "慎", "灿", "蛋", "别", "利", "音", "韵", "韶", "磊", "韬", "制", "韦", "前", "鼎", "意", "瀚"};

//验证是否清洗的数组

        String[] noChange = {"财政", "黑龙江", "北京", "天津", "上海", "重庆", "河北", "山西", "辽宁", "吉林", "江苏", "浙江", "安徽", "福建", "江西", "河南", "湖北", "湖南", "广东", "海南", "四川", "贵州", "云南", "陕西", "甘肃", "青海", "台湾", "内蒙", "广西", "西藏", "宁夏", "新疆", "香港", "澳门", "中学", "磁", "厂", "经营部", "农资店", "青铜峡", "自治县", "内蒙古", "石嘴山", "加盟店", "蒙古族", "土特产", "副食品", "合作社", "清真寺", "互助社", "竹纤维", "批发部", "经销部", "电动车", "中学", "小学", "学校", "高中", "大学", "增补", "个人", "代发", "电声", "浙江", "针织", "童装", "旅游", "塑料", "回收", "宾馆", "装饰", "工资", "技校", "勘察", "地质", "保险", "物业", "安装", "实验", "纺织", "景观", "超市", "宾馆", "商城", "电视", "建设", "宁夏", "核算", "汽车", "流通", "木业", "餐饮", "家私", "农民", "酒店", "水果", "化工", "支行", "银川", "维修", "交通", "发展", "银行", "器材", "市场", "实业", "机械", "工贸", "二手", "批发", "食堂", "车行", "集中", "机电", "宿舍", "小额", "大街", "电器", "制造", "固原", "工程", "专业", "幼儿", "农场", "集团", "综合", "社区", "科技", "瓜果", "清真", "码头", "园区", "休闲", "粮油", "商行", "管理", "股份", "商业", "文化", "传播", "中卫", "广播", "酒楼", "单元", "中心", "印刷", "开发", "防水", "吴忠", "电子", "资金", "大修", "责任", "建材", "幕墙", "印务", "医疗", "嘉兴", "农村", "有限", "物资", "器械", "珠宝", "电力", "资产", "贷款", "苗木", "办公", "服装", "服务", "花园", "村级", "种植", "公司", "行政", "咨询", "养殖", "保洁", "小区", "设备", "天窗", "街道", "园林", "公路", "节能", "销售", "贸易", "商贸", "连锁", "胶粘", "制品", "路桥", "矿业", "南寺", "工业", "陶瓷", "农业", "果蔬"

        };
        String[] noChange1 = {"工", "业", "局", "种", "大", "附", "北", "站", "左", "屯", "坊", "巷", "城", "省", "厂", "四", "乡", "九", "院", "路", "县", "区", "园", "室", "镇", "面", "桥", "堍", "层", "内", "幢", "洲", "州", "厦", "家", "楼", "南", "侧", "店", "前", "部", "弄", "旁", "组", "庄", "浜", "十", "户", "中", "社", "荡", "八", "市", "队", "六", "栋", "后", "五", "东", "号", "村", "右", "第", "苑", "三", "西", "小", "座", "环", "寺", "一", "七", "二", "口", "委", "道", "F", "~", "！", "@", "#", "￥", "%", "…", "^", "……", "&", "*", "（", "）", "—", "—", "+", "}", "{", "：", "“", "》", "《", "？", "-", "(", ")"

        };
        String[] noChange2 = {"农垦", "水稻", "配肥", "联合", "商会", "财政", "家电", "投资", "富民", "田园", "五常", "乐山", "自贡", "泸州", "雅安", "宜宾", "资阳", "眉山", "贵港", "玉林", "北海", "漳州", "衡水", "廊坊", "承德", "温州", "宁波", "杭州", "台州", "嘉兴", "金华", "湖州", "绍兴", "舟山", "丽水", "衢州", "西安", "咸阳", "宝鸡", "汉中", "渭南", "安康", "榆林", "商洛", "延安", "铜川", "濮阳", "沧州", "唐山", "保定", "邯郸", "邢台", "漯河", "许昌", "鹤壁", "济源", "长沙", "邵阳", "常德", "衡阳", "株洲", "湘潭", "永州", "岳阳", "怀化", "郴州", "娄底", "益阳", "厦门", "泉州", "福州", "莆田", "宁德", "三明", "南平", "龙岩", "南宁", "周口", "商丘", "开封", "焦作", "曲靖", "保山", "玉溪", "昭通", "巴中", "遂宁", "内江", "柳州", "桂林", "梧州", "钦州", "来宾", "河池", "百色", "贺州", "崇左", "芜湖", "合肥", "六安", "宿州", "阜阳", "安庆", "三亚", "海口", "琼海", "文昌", "东方", "成都", "绵阳", "广元", "达州", "南充", "德阳", "广安", "齐齐", "哈尔", "蚌埠", "淮北", "淮南", "宣城", "黄山", "铜陵", "亳州", "池州", "巢湖", "滁州", "南昌", "赣州", "上饶", "吉安", "九江", "新余", "抚州", "宜春", "黄冈", "孝感", "十堰", "咸宁", "黄石", "仙桃", "天门", "随州", "荆门", "潜江", "鄂州", "太原", "大同", "运城", "长治", "晋城", "忻州", "临汾", "吕梁", "晋中", "阳泉", "朔州", "大连", "沈阳", "丹东", "辽阳", "大庆", "锦州", "朝阳", "营口", "鞍山", "抚顺", "阜新", "盘锦", "本溪", "萍乡", "鹰潭", "武汉", "宜昌", "襄樊", "荆州", "铁岭", "台北", "高雄", "台中", "新竹", "基隆", "台南", "嘉义", "南通", "常州", "镇江", "扬州", "淮安", "泰州", "宿迁", "郑州", "南阳", "新乡", "安阳", "洛阳", "信阳", "鸡西", "黑河", "绥化", "鹤岗", "伊春", "贵阳", "遵义", "安顺", "兰州", "天水", "庆阳", "武威", "酒泉", "张掖", "白银", "平凉", "金昌", "吉林", "长春", "白山", "白城", "松原", "辽源", "通化", "四平", "银川", "吴忠", "中卫", "固原", "阳江", "梅州", "云浮", "茂名", "汕尾", "济南", "青岛", "临沂", "济宁", "菏泽", "烟台", "淄博", "泰安", "潍坊", "日照", "威海", "滨州", "东营", "聊城", "德州", "莱芜", "枣庄", "苏州", "徐州", "盐城", "无锡", "南京", "东莞", "广州", "中山", "深圳", "惠州", "江门", "珠海", "汕头", "佛山", "湛江", "河源", "肇庆", "清远", "潮州", "韶关", "揭阳", "财富", "担保", "北京", "天津", "上海", "重庆", "河北", "山西", "辽宁", "吉林", "江苏", "浙江", "安徽", "福建", "江西", "河南", "湖北", "湖南", "广东", "海南", "四川", "贵州", "云南", "陕西", "甘肃", "青海", "台湾", "内蒙", "广西", "西藏", "宁夏", "新疆", "香港", "澳门", "中学", "小学", "学校", "高中", "大学", "增补", "个人", "代发", "电声", "浙江", "针织", "童装", "旅游", "塑料", "回收", "宾馆", "装饰", "工资", "技校", "勘察", "地质", "保险", "物业", "安装", "实验", "纺织", "景观", "超市", "宾馆", "商城", "电视", "建设", "宁夏", "核算", "汽车", "流通", "木业", "餐饮", "家私", "农民", "酒店", "水果", "化工", "支行", "银川", "维修", "交通", "发展", "银行", "器材", "市场", "实业", "机械", "工贸", "二手", "批发", "食堂", "车行", "集中", "机电", "宿舍", "小额", "大街", "电器", "制造", "固原", "工程", "专业", "幼儿", "农场", "集团", "综合", "社区", "科技", "瓜果", "清真", "码头", "园区", "休闲", "粮油", "商行", "管理", "股份", "商业", "文化", "传播", "中卫", "广播", "酒楼", "单元", "中心", "印刷", "开发", "防水", "吴忠", "电子", "资金", "大修", "责任", "建材", "幕墙", "印务", "医疗", "嘉兴", "农村", "有限", "物资", "器械", "珠宝", "电力", "资产", "贷款", "苗木", "办公", "服装", "服务", "花园", "村级", "种植", "公司", "行政", "咨询", "养殖", "保洁", "小区", "设备", "天窗", "街道", "园林", "公路", "节能", "销售", "贸易", "商贸", "连锁", "胶粘", "制品", "路桥", "矿业", "南寺", "工业", "陶瓷", "农业", "果蔬"

        };
        String[] noChange3 = {"平顶山", "驻马店", "三门峡", "石家庄", "河北区", "秦皇岛", "张家口", "马鞍山", "葫芦岛", "哈尔滨", "佳木斯", "双鸭山", "牡丹江", "配肥站", "黑龙江", "经营部", "农资店", "青铜峡", "自治县", "内蒙古", "石嘴山", "连云港", "加盟店", "蒙古族", "延边州", "石嘴山", "甘南州", "土特产", "副食品", "合作社", "清真寺", "互助社", "竹纤维", "批发部", "经销部", "电动车"};

        String newName = "";

//验证是公司 为1
            int company = 0;

            for (int i = 0; i < noChange.length; i++) {
                if (str.contains(noChange[i]) && str.length() > 3) {
                    company = 1;
                    break;
                }
            }
            if (company != 0) {

            String[] arrStr = new String[str.length()];
            for (int i = 0; i < arrStr.length; i++) {
                arrStr[i] = str.substring(i, i + 1);
            }

            for (int i = 0; i < arrStr.length; i++) {
                int temp = 0;

                try {
                    for (int j = 0; j < noChange3.length; j++) {
                        if (arrStr[i].contains(noChange3[j].substring(0, 1)) && arrStr[i + 1].contains(noChange3[j].substring(1, 2)) && arrStr[i + 2].contains(noChange3[j].substring(2, 3))) {
                            i += 2;
                            temp = 1;
                            break;
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    i += 2;
                    continue;
                }
                try {
                    for (int j = 0; j < noChange2.length; j++) {
                        if (arrStr[i].contains(noChange2[j].substring(0, 1)) && arrStr[i + 1].contains(noChange2[j].substring(1, 2))) {
                            i += 1;
                            temp = 1;
                            break;
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    i += 1;
                    continue;
                }
                for (int j = 0; j < noChange1.length; j++) {
                    if (arrStr[i].contains(noChange1[j])) {
                        temp = 1;
                        break;
                    }
                }
                if (temp == 0) {
                    int hashTemp = Math.abs(arrStr[i].hashCode() + hashSalt);
                    arrStr[i] = Surname[hashTemp % (Surname.length - 1)];
                }


            }
            for (int i = 0; i < arrStr.length; i++) {
                newName += arrStr[i];
            }
//--------------------------------------------------------return

            String s = newName;
            String vLenth = value + "";
            byte[] vLenthB = vLenth.getBytes("GBK");
            byte[] sLenthB = s.getBytes("GBK");
            int diff = 0;
            if (vLenthB.length < sLenthB.length) {
                diff = ((sLenthB.length - vLenthB.length) / 2) + ((sLenthB.length - vLenthB.length) % 2);
                s = s.substring(0, s.length() - diff);
            }
            if (vLenthB.length < s.getBytes("GBK").length) return new String(vLenth.getBytes("GBK"), "GBK");
            if (isSuangYin == 1) {
                s = "\"" + s + "\"";
            }
            s = new String(s.getBytes("GBK"), "GBK");

            return s;

        } else {
//特殊字符
            boolean isSpecial = false;
//复姓
            boolean isTwoName = false;
//少数民族
            boolean isRareName = false;

            String lastName = "";
            String firstName = "";

            int lastNameHashCode = 0;
            int firstNameHashCode = 0;

//判断是否含有特殊字符
            java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("[0-9]*[A-Za-z]*[`~!@#$%^&*()+=|{}':;',\\\\[\\\\].<>/?~！@#￥%……&*（）——+|{}【】‘；：”“’。，、？]*");
            for (int i = 0; i < str.length(); i++) {
                java.util.regex.Matcher matcher = pattern.matcher(str.substring(i, i + 1));
                boolean matches = matcher.matches();
                if (matches) {
                    isSpecial = matches;
                    break;
                }
            }
//判断是否是复姓
            for (int i = 0; i < contain.length; i++) {
                if (str.contains(contain[i])) {
                    isTwoName = true;
                }
            }
//判断是否是少数民族“·”
            if (str.contains("·")) {
                isRareName = true;
            }
//正常名字
//复姓名字
//少数民族名字
            if (!isSpecial) {
                lastName = str.substring(0, 1);
                firstName = str.substring(1, str.length());
                if (isTwoName) {
                    lastName = str.substring(0, 2);
                    firstName = str.substring(2, str.length());
                }
                if (isRareName) {
                    String regex = "·";
                    String strAry[] = str.split(regex);
                    if (strAry.length == 2) {
                        lastName = strAry[0];
                        firstName = strAry[1];
                    } else {
                        return value;
                    }
                }

//少数民族拼新名字
                if (isRareName) {
                    for (int i = 0; i < lastName.length(); i++) {
                        firstNameHashCode = Math.abs(lastName.substring(i, i + 1).hashCode() + hashSalt);
                        newName += fiName[firstNameHashCode % (fiName.length - 1)];
                    }
                    newName += "·";
                    for (int i = 0; i < firstName.length(); i++) {
                        firstNameHashCode = Math.abs(firstName.substring(i, i + 1).hashCode() + hashSalt);
                        newName += fiName[firstNameHashCode % (fiName.length - 1)];
                    }
                } else {
                    lastNameHashCode = Math.abs(lastName.hashCode() + hashSalt);//姓取正数
                    newName = laName[lastNameHashCode % (laName.length - 1)]; //获得一个固定的姓氏
                    if (isTwoName) {
                        newName = contain[lastNameHashCode % (contain.length - 1)]; //获得一个固定的姓氏
                    }
                    for (int i = 0; i < firstName.length(); i++) {
                        firstNameHashCode = Math.abs(firstName.substring(i, i + 1).hashCode() + hashSalt);
                        newName += fiName[firstNameHashCode % (fiName.length - 1)];
                    }
                }
            }
//正常名字带特殊字符
//复姓名字带特殊字符
//少数民族名字带特殊字符
//判断汉字
            java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("[\\u4e00-\\u9fa5]");

            if (isSpecial) {
                int temp = 0;
//根据以上判断截取每个字符放入数组
                String[] nameArray = new String[str.length()];
                for (int i = 0; i < str.length(); i++) {
                    nameArray[i] = str.substring(i, i + 1);
                }
                if (isTwoName) {
                    for (int i = 0; i < nameArray.length; i++) {
                        java.util.regex.Matcher matcher1 = pattern1.matcher(nameArray[i]);
                        boolean matches1 = matcher1.matches();

                        if (matches1 && temp == 1) {
                            firstName = nameArray[i];
                            firstNameHashCode = Math.abs(firstName.hashCode() + hashSalt);//名取正数
                            newName = fiName[firstNameHashCode % (fiName.length - 1)]; //获得一个固定的姓名字
                            nameArray[i] = newName.substring(0);
                        }

                        if (matches1 && temp == 0) {
                            lastName = nameArray[i] + nameArray[i + 1];
                            lastNameHashCode = Math.abs(lastName.hashCode() + hashSalt);//姓取正数
                            newName = contain[lastNameHashCode % (contain.length - 1)]; //获得一个固定的姓氏
                            nameArray[i] = newName.substring(0, 1);
                            nameArray[i + 1] = newName.substring(1, 2);
                            i += 1;
                            temp += 1;
                        }
                    }
                }

                if (isRareName) {

                    for (int i = 0; i < nameArray.length; i++) {
                        java.util.regex.Matcher matcher1 = pattern1.matcher(nameArray[i]);
                        boolean matches1 = matcher1.matches();

                        if (matches1) {
                            firstName = nameArray[i];
                            firstNameHashCode = Math.abs(firstName.hashCode() + hashSalt);//名取正数
                            nameArray[i] = fiName[firstNameHashCode % (fiName.length - 1)]; //获得一个固定的姓名字
                        }
                    }
                }

                for (int i = 0; i < nameArray.length; i++) {
                    java.util.regex.Matcher matcher1 = pattern1.matcher(nameArray[i]);
                    boolean matches1 = matcher1.matches();

                    if (matches1 && temp == 1) {
                        firstName = nameArray[i];
                        firstNameHashCode = Math.abs(firstName.hashCode() + hashSalt);//名取正数
                        newName = fiName[firstNameHashCode % (fiName.length - 1)]; //获得一个固定的姓名字
                        nameArray[i] = newName.substring(0);
                    }

                    if (matches1 && temp == 0) {
                        lastName = nameArray[i];
                        lastNameHashCode = Math.abs(lastName.hashCode() + hashSalt);//姓取正数
                        newName = laName[lastNameHashCode % (laName.length - 1)]; //获得一个固定的姓氏
                        nameArray[i] = newName.substring(0, 1);
                        temp += 1;
                    }

                }
//生成String类型新名字
                newName = "";
                for (int i = 0; i < nameArray.length; i++) {
                    newName += nameArray[i];
                }
            }
//--------------------------------------------------------return

            String s = newName;
            String vLenth = value + "";
            byte[] vLenthB = vLenth.getBytes("GBK");
            byte[] sLenthB = s.getBytes("GBK");
            int diff = 0;
            if (vLenthB.length < sLenthB.length) {
                diff = ((sLenthB.length - vLenthB.length) / 2) + ((sLenthB.length - vLenthB.length) % 2);
                s = s.substring(0, s.length() - diff);
            }
            if (vLenthB.length < s.getBytes("GBK").length) return new String(vLenth.getBytes("GBK"), "GBK");
            if (isSuangYin == 1) {
                s = "\"" + s + "\"";
            }
            s = new String(s.getBytes("GBK"), "GBK");

            return s;
        }


    }

}
